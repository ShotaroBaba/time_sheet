<?php
// This will store a password as well as salt 
// to prevent the attack done by the users.
// to prevent a further attack done by a malicious user,
// salt is also be created for every user.
header("Content-Type: text/html;charset=UTF-8");
error_reporting(E_ALL ^ E_WARNING ^ E_NOTICE);


include "/var/www/html/.secret/.config.php";

require_once("/var/www/html/plugin/strip_malicious_character.php");
// TODO: Enable random pepper generation when 
// a server is created.

// TODO: Session needs to be generated by SHA2
session_name('employee_password_man');
session_start();

// For preventing session hijacking.
if ($_SERVER['REMOTE_ADDR'] != $_SESSION['ipaddress'])
{
  session_unset();
  session_destroy();
}

if ($_SERVER['HTTP_USER_AGENT'] != $_SESSION['useragent'])
{
  session_unset();
  session_destroy();
}

// Check session info is not empty. A user is not allow to 
// re input his/her own info again.
if(
   empty($_SESSION) ||
   empty($_SESSION['user_info']['employeeFirstName']) || 
   empty($_SESSION['user_info']['employeeLastName']) ||
   empty($_SESSION['user_info']['employeeAddress']) || 
   empty($_SESSION['user_info']['employeePhoneNumber']) ||
   empty($_SESSION['user_info']['employeeEmail']) ||
   empty($_SESSION['user_info']['employeePassword'])) 
  {
    echo "Unknown error.";
    die;
  }

  $is_registration_success=false;
try {

  $conn = new PDO("mysql:host=$host;dbname=$db;charset=utf8mb4", $user, $pass);
  
  // Toggle an error mode to exception
  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

  //*********************************** */
  //** Insert user info *************** */
  //*********************************** */
  $insert_account_info_prepare=
  $conn->prepare("INSERT INTO `user` (`first_name`,
  `middle_name`,
  `last_name`,
  `address` ,
  `phone_number` , 
  `email`)
  VALUES
  (:first_name, :middle_name, :last_name, :_address, :phone_number, :email);");

  // Input values from user's data.
  $insert_account_info_prepare->bindValue(':first_name', 
  htmlspecialchars($_SESSION['user_info']['employeeFirstName']) , 
  PDO::PARAM_STR);
  
  $insert_account_info_prepare->bindValue(':middle_name', 
  htmlspecialchars($_SESSION['user_info']['employeeMiddleName']) ,
  PDO::PARAM_STR);
  
  $insert_account_info_prepare->bindValue(':last_name', 
  htmlspecialchars($_SESSION['user_info']['employeeLastName']) ,
  PDO::PARAM_STR);

  $insert_account_info_prepare->bindValue(':_address', 
  htmlspecialchars($_SESSION['user_info']['employeeAddress']) ,
  PDO::PARAM_STR);
  
  $insert_account_info_prepare->bindValue(':phone_number', 
  htmlspecialchars($_SESSION['user_info']['employeePhoneNumber']), 
  PDO::PARAM_STR);
   
  $insert_account_info_prepare->bindValue(':email', 
  htmlspecialchars($_SESSION['user_info']['employeeEmail']),
  PDO::PARAM_STR);

  $insert_account_info_prepare->execute();
  $insert_account_info_prepare=NULL;
  //*********************************** */
  //*********************************** */
  

  //*********************************** */
  // Fetch user_id AFTER insert an user's info. */
  //*********************************** */
  $last_id_prepare=$conn->prepare("SELECT  LAST_INSERT_ID();");
  $last_id_prepare->execute();
  $result = $last_id_prepare->fetch(PDO::FETCH_ASSOC);
  $user_id_after_insert=$result['LAST_INSERT_ID()'];

  $last_id_prepare=NULL;
  //*********************************** */
  //*********************************** */



  //*********************************** */
  // Insert user's password as well as a random salt. */
  //*********************************** */
  $insert_pass_prepare=$conn->prepare("INSERT INTO `user_secret` (
    `user_id`,
    `salt`,
    `email_verification_token`,
    `verified`,
    `password`)
  VALUES
  (:user_id, :salt, :email_verification_token, 1, :_password);");

  $salt=bin2hex(openssl_random_pseudo_bytes(16));
  $email_verification_token=bin2hex(openssl_random_pseudo_bytes(64));

  $insert_pass_prepare->bindValue(':user_id', 
  $user_id_after_insert, 
  PDO::PARAM_INT);
  
  $insert_pass_prepare->bindValue(':salt', 
  $salt,
  PDO::PARAM_STR);

  $insert_pass_prepare->bindValue(':email_verification_token', 
  $email_verification_token,
  PDO::PARAM_STR);

  $insert_pass_prepare->bindValue(':_password', 
  hash('sha256',$salt.$_SESSION['user_info']['employeePassword'].$pepper),
  PDO::PARAM_STR);

  $insert_pass_prepare->execute();
  $insert_pass_prepare=NULL;

  //*********************************** */
  //*********************************** */
  // Finish the connection.
  $conn=NULL;

  // Email verification completed.

  // Set true after all process has finished.
  $is_registration_success=true;
} catch(PDOException $e) {

  http_response_code(500);
  echo "Unkonwn error";

  // Disconnect all objects from mysql.
  $insert_account_info_prepare=NULL;
  $last_id_prepare=NULL;
  $insert_pass_prepare=NULL;
}

?>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="/script/jquery-3.6.0.min.js"></script>
  <title>Now processing...</title>
</head>
<body>
  
  <form method="POST"
  id='userForm'
  action='/employee_registration/employee_pre_registration_complete_message.php'
  enctype="multipart/form-data" accept-charset="UTF-8"
  >

  <input id='registrationSuccess'
  name='registrationSuccess'
  type='hidden'
  value='<?php echo $is_registration_success;?>'>

 
  </form>
   <!-- If registration success, then go to regisration complete web page. -->
   <?php if($is_registration_success) { ?>
    <script type="text/javascript">
      $('#userForm').submit();
    </script>
  <?php } ?>

</body>
</html>
